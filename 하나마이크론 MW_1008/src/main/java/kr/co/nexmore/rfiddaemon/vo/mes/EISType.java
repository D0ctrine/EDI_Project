package kr.co.nexmore.rfiddaemon.vo.mes;

import com.miracom.oneoone.transceiverx.StreamTransformer;
import kr.co.nexmore.rfiddaemon.vo.reader.ReaderVO;
import lombok.ToString;

import static kr.co.nexmore.rfiddaemon.common.CommonControlCode.MES_EVENT_FAIL;

/*******************************************************************************
 ' EISType.cs
 '
 ' Copyright (c) 2007 by Miracom,Inc.
 ' All rights reserved.
 '
 ' Generated by DevTool XMLGen 1.0
 '
 ' Created at 2012-05-17 09:11:16
 '
 ' Author : Miracom. R&D.
 ' Description : DevTool Xml Generator Version 1.0
 '******************************************************************************/


public class EISType {

    @ToString
    public static class EIS_RFID_Request_In_Tag {
        public String h_passport;
        public char h_language = '1';
        public String h_factory = "HMKA1";
        public String h_user_id = null;
        public String h_password = null;
        public char h_proc_step;
        public String res_id;
        public String reader_ip;

        public char antenna_port_1 = 48;
        public String uid_1;
        public String magazine_id_1;
        public String lot_id_1;
        public String event_time_1;

        public char antenna_port_2 = 48;
        public String uid_2;
        public String magazine_id_2;
        public String lot_id_2;
        public String event_time_2;

        public char antenna_port_3 = 48;
        public String uid_3;
        public String magazine_id_3;
        public String lot_id_3;
        public String event_time_3;

        public char antenna_port_4 = 48;
        public String uid_4;
        public String magazine_id_4;
        public String lot_id_4;
        public String event_time_4;

        public String resv_field_1;
        public String resv_field_2;
        public String resv_field_3;
        public String resv_field_4;
        public String resv_field_5;

        public char resv_flag_1;
        public char resv_flag_2;
        public char resv_flag_3;
        public char resv_flag_4;
        public char resv_flag_5;

        public EIS_RFID_Request_In_Tag() {
        }

        public EIS_RFID_Request_In_Tag(String res_id, String reader_ip, int antenna_port_1, String uid_1, String magazine_id_1, String lot_id_1, int antenna_port_2, String uid_2, String magazine_id_2, String lot_id_2) {
            this.res_id = res_id;
            this.reader_ip = reader_ip;
            this.antenna_port_1 = (char) (antenna_port_1 + 48);
            this.uid_1 = uid_1;
            this.magazine_id_1 = magazine_id_1;
            this.lot_id_1 = lot_id_1;
            this.antenna_port_2 = (char) (antenna_port_2 + 48);
            this.uid_2 = uid_2;
            this.magazine_id_2 = magazine_id_2;
            this.lot_id_2 = lot_id_2;
        }

        public EIS_RFID_Request_In_Tag(String res_id, String reader_ip, int antenna_port, String uid, String magazine_id) {
            this.res_id = res_id;
            this.reader_ip = reader_ip;
            if (antenna_port == 1) {
                this.antenna_port_1 = (char) (antenna_port + 48);
                this.uid_1 = uid;
                this.magazine_id_1 = magazine_id;
            } else if (antenna_port == 2) {
                this.antenna_port_2 = (char) (antenna_port + 48);
                this.uid_2 = uid;
                this.magazine_id_2 = magazine_id;
            } else if (antenna_port == 3) {
                this.antenna_port_3 = (char) (antenna_port + 48);
                this.uid_3 = uid;
                this.magazine_id_3 = magazine_id;
            } else if (antenna_port == 4) {
                this.antenna_port_4 = (char) (antenna_port + 48);
                this.uid_4 = uid;
                this.magazine_id_4 = magazine_id;
            }
            this.resv_flag_5 = (char) (antenna_port + 48);
        }

        public EIS_RFID_Request_In_Tag(String equipmentName, String readerIp, int channel) {
            this.res_id = equipmentName;
            this.reader_ip = readerIp;
            this.resv_flag_5 = (char)(channel + 48);
        }
    }

    @ToString
    public static class RFID_EIS_Reply_Out_Tag {

        public char h_status_value;
        public String h_msg_code;
        public String h_msg;
        public String h_field_msg;
        public String h_db_err_msg;
        public String res_id;
        public String reader_ip;

        public char antenna_port_1;
        public String uid_1;
        public String magazine_id_1;
        public String lot_id_1; // LOT

        public char antenna_port_2;
        public String uid_2;
        public String magazine_id_2;
        public String lot_id_2; // LOT

        public char antenna_port_3;
        public String uid_3;
        public String magazine_id_3;
        public String lot_id_3;

        public char antenna_port_4;
        public String uid_4;
        public String magazine_id_4;
        public String lot_id_4;

        public String resv_field_1; // LOT_START
        public String resv_field_2; // LOT_END
        public String resv_field_3;
        public String resv_field_4;
        public String resv_field_5;

        public char resv_flag_1;
        public char resv_flag_2;
        public char resv_flag_3;
        public char resv_flag_4;
        public char resv_flag_5;

        public RFID_EIS_Reply_Out_Tag() {}

        public RFID_EIS_Reply_Out_Tag(EIS_RFID_Request_In_Tag requestInTag) {
            this.h_status_value = MES_EVENT_FAIL;
            this.res_id = requestInTag.res_id;
            this.reader_ip = requestInTag.reader_ip;
            this.antenna_port_1 = requestInTag.antenna_port_1;
            this.uid_1 = requestInTag.uid_1;
            this.magazine_id_1 = requestInTag.magazine_id_1;
            this.lot_id_1 = requestInTag.lot_id_1;
            this.antenna_port_2 = requestInTag.antenna_port_2;
            this.uid_2 = requestInTag.uid_2;
            this.magazine_id_2 = requestInTag.magazine_id_2;
            this.lot_id_2 = requestInTag.lot_id_2;
            this.uid_3 = requestInTag.uid_3;
            this.magazine_id_3 = requestInTag.magazine_id_3;
            this.lot_id_3 = requestInTag.lot_id_3;
            this.uid_4 = requestInTag.uid_4;
            this.magazine_id_4 = requestInTag.magazine_id_4;
            this.lot_id_4 = requestInTag.lot_id_4;

            this.resv_field_2 = requestInTag.resv_field_2;
            this.resv_flag_2 = requestInTag.resv_flag_2;
        }

    }


    @ToString
    public static class RFID_EIS_Change_Resource_Info_In {
        public String h_passport;
        public char h_language = '1';
        public String h_factory = "HMKA1";
        public String h_user_id = null;
        public String h_password = null;
        public char h_proc_step;

        public String res_id;       // 설비명
        public String reader_id;    // 리더명
        public String reader_ip;    // 리더 IP

        public char reader_status;  // 연결상태 (Y,N)
        public char channel;    // 2CH, 4CH (2,4)
        public char mes_use_flag;   // Y,N

        public String resv_field_1; // MAC setting
        public String resv_field_2;
        public String resv_field_3;
        public String resv_field_4;
        public String resv_field_5;

        public char resv_flag_1;
        public char resv_flag_2;
        public char resv_flag_3;
        public char resv_flag_4;
        public char resv_flag_5;

        public RFID_EIS_Change_Resource_Info_In() {

        }

        public  RFID_EIS_Change_Resource_Info_In(ReaderVO readerVO) {
            this.res_id = readerVO.getEquipmentName();
            this.reader_id = readerVO.getReaderName();
            this.reader_ip = readerVO.getReaderIp();
            this.reader_status = 'N';
            this.channel = (char)(readerVO.getChannelCnt() + 48);
//            this.mes_use_flag = readerVO.getMesUseYn().charAt(0);
            this.mes_use_flag = 'Y';
            this.resv_field_1 = readerVO.getReaderMac();

        }
    }


    public static void serialize_EIS_RFID_Request_In_Tag(StreamTransformer former, EIS_RFID_Request_In_Tag target) throws Exception {

        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 20));

        former.writeMsgChar(target.antenna_port_1);
        former.writeMsgSizedString(target.uid_1, getTrimSize(target.uid_1, 20));
        former.writeMsgSizedString(target.magazine_id_1, getTrimSize(target.magazine_id_1, 20));
        former.writeMsgSizedString(target.lot_id_1, getTrimSize(target.lot_id_1, 50));
        former.writeMsgSizedString(target.event_time_1, getTrimSize(target.event_time_1, 20));

        former.writeMsgChar(target.antenna_port_2);
        former.writeMsgSizedString(target.uid_2, getTrimSize(target.uid_2, 20));
        former.writeMsgSizedString(target.magazine_id_2, getTrimSize(target.magazine_id_2, 20));
        former.writeMsgSizedString(target.lot_id_2, getTrimSize(target.lot_id_2, 50));
        former.writeMsgSizedString(target.event_time_2, getTrimSize(target.event_time_2, 20));

        former.writeMsgChar(target.antenna_port_3);
        former.writeMsgSizedString(target.uid_3, getTrimSize(target.uid_3, 20));
        former.writeMsgSizedString(target.magazine_id_3, getTrimSize(target.magazine_id_3, 20));
        former.writeMsgSizedString(target.lot_id_3, getTrimSize(target.lot_id_3, 50));
        former.writeMsgSizedString(target.event_time_3, getTrimSize(target.event_time_3, 20));

        former.writeMsgChar(target.antenna_port_4);
        former.writeMsgSizedString(target.uid_4, getTrimSize(target.uid_4, 20));
        former.writeMsgSizedString(target.magazine_id_4, getTrimSize(target.magazine_id_4, 20));
        former.writeMsgSizedString(target.lot_id_4, getTrimSize(target.lot_id_4, 50));
        former.writeMsgSizedString(target.event_time_4, getTrimSize(target.event_time_4, 20));

        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));

        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void serialize_RFID_EIS_Change_Resource_Info_In(StreamTransformer former, RFID_EIS_Change_Resource_Info_In target) throws Exception {

        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);

        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.reader_id, getTrimSize(target.reader_id, 20));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 20));

        former.writeMsgChar(target.reader_status);
        former.writeMsgChar(target.channel);
        former.writeMsgChar(target.mes_use_flag);

        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));

        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_RFID_Request_In_Tag(StreamTransformer former, EIS_RFID_Request_In_Tag source) throws Exception {

        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.reader_ip = former.readMsgString();

        source.antenna_port_1 = former.readMsgChar();
        source.uid_1 = former.readMsgString();
        source.magazine_id_1 = former.readMsgString();
        source.lot_id_1 = former.readMsgString();
        source.event_time_1 = former.readMsgString();

        source.antenna_port_2 = former.readMsgChar();
        source.uid_2 = former.readMsgString();
        source.magazine_id_2 = former.readMsgString();
        source.lot_id_2 = former.readMsgString();
        source.event_time_2 = former.readMsgString();

        source.antenna_port_3 = former.readMsgChar();
        source.uid_3 = former.readMsgString();
        source.magazine_id_3 = former.readMsgString();
        source.lot_id_3 = former.readMsgString();
        source.event_time_3 = former.readMsgString();

        source.antenna_port_4 = former.readMsgChar();
        source.uid_4 = former.readMsgString();
        source.magazine_id_4 = former.readMsgString();
        source.lot_id_4 = former.readMsgString();
        source.event_time_4 = former.readMsgString();

        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();

        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_RFID_EIS_Reply_Out_Tag(StreamTransformer former, RFID_EIS_Reply_Out_Tag target) throws Exception {

        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 20));

        former.writeMsgChar(target.antenna_port_1);
        former.writeMsgSizedString(target.uid_1, getTrimSize(target.uid_1, 20));
        former.writeMsgSizedString(target.magazine_id_1, getTrimSize(target.magazine_id_1, 20));
        former.writeMsgSizedString(target.lot_id_1, getTrimSize(target.lot_id_1, 50));

        former.writeMsgChar(target.antenna_port_2);
        former.writeMsgSizedString(target.uid_2, getTrimSize(target.uid_2, 20));
        former.writeMsgSizedString(target.magazine_id_2, getTrimSize(target.magazine_id_2, 20));
        former.writeMsgSizedString(target.lot_id_2, getTrimSize(target.lot_id_2, 50));

        former.writeMsgChar(target.antenna_port_3);
        former.writeMsgSizedString(target.uid_3, getTrimSize(target.uid_3, 20));
        former.writeMsgSizedString(target.magazine_id_3, getTrimSize(target.magazine_id_3, 20));
        former.writeMsgSizedString(target.lot_id_3, getTrimSize(target.lot_id_3, 50));

        former.writeMsgChar(target.antenna_port_4);
        former.writeMsgSizedString(target.uid_4, getTrimSize(target.uid_4, 20));
        former.writeMsgSizedString(target.magazine_id_4, getTrimSize(target.magazine_id_4, 20));
        former.writeMsgSizedString(target.lot_id_4, getTrimSize(target.lot_id_4, 50));

        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));

        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_RFID_EIS_Reply_Out_Tag(StreamTransformer former, RFID_EIS_Reply_Out_Tag source) throws Exception {

        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.res_id = former.readMsgString();
        source.reader_ip = former.readMsgString();

        source.antenna_port_1 = former.readMsgChar();
        source.uid_1 = former.readMsgString();
        source.magazine_id_1 = former.readMsgString();
        source.lot_id_1 = former.readMsgString();
//        source.event_time_1 = former.readMsgString();

        source.antenna_port_2 = former.readMsgChar();
        source.uid_2 = former.readMsgString();
        source.magazine_id_2 = former.readMsgString();
        source.lot_id_2 = former.readMsgString();
//        source.event_time_2 = former.readMsgString();

        source.antenna_port_3 = former.readMsgChar();
        source.uid_3 = former.readMsgString();
        source.magazine_id_3 = former.readMsgString();
        source.lot_id_3 = former.readMsgString();
//        source.event_time_3 = former.readMsgString();

        source.antenna_port_4 = former.readMsgChar();
        source.uid_4 = former.readMsgString();
        source.magazine_id_4 = former.readMsgString();
        source.lot_id_4 = former.readMsgString();
//        source.event_time_4 = former.readMsgString();

        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();

        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static int getTrimSize(String str, int size) {
        int pos = rtrim(str).length();
        return pos <= size ? pos : size;
    }

    public static String rtrim(String str) {
        if (str == null)
            str = "";

        for (int i = 0; i < str.length(); i++) {
            if (' ' != str.charAt(i))
                return str.substring(0, i) + str.substring(i).trim();
        }
        return str.trim();
    }
}

